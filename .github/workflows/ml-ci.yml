name: ML Service CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths: [ 'ml/**' ]
  pull_request:
    branches: [ main, develop ]
    paths: [ 'ml/**' ]

env:
  PYTHON_VERSION: '3.9'
  MONGODB_VERSION: '5.0'
  REDIS_VERSION: '6.0'

jobs:
  test:
    name: Test ML Service
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:5.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:6.0
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: ml/requirements.txt
    
    - name: Install dependencies
      working-directory: ./ml
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run linting
      working-directory: ./ml
      run: |
        flake8 src/
        black --check src/
        mypy src/
        
    - name: Run formatting check
      working-directory: ./ml
      run: |
        black --check src/
        isort --check-only src/
        
    - name: Run unit tests
      working-directory: ./ml
      run: pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
      env:
        MONGODB_URI: mongodb://localhost:27017/burnout_prediction_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        USE_REAL_CALENDAR_API: false
        USE_REAL_GMAIL_API: false
        MODEL_PATH: ./models/test_model.pkl
        
    - name: Run integration tests
      working-directory: ./ml
      run: pytest tests/integration/ -v
      env:
        MONGODB_URI: mongodb://localhost:27017/burnout_prediction_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        USE_REAL_CALENDAR_API: false
        USE_REAL_GMAIL_API: false
        MODEL_PATH: ./models/test_model.pkl
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./ml/coverage.xml
        flags: ml
        name: ml-coverage
        fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: ml/requirements.txt
    
    - name: Install dependencies
      working-directory: ./ml
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit
        
    - name: Run security audit
      working-directory: ./ml
      run: |
        safety check --json
        bandit -r src/ -f json
        
    - name: Run Snyk security scan
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true
      
    - name: Run CodeQL analysis
      uses: github/codeql-action/init@v2
      with:
        languages: python
        
    - name: Perform CodeQL analysis
      uses: github/codeql-action/analyze@v2

  model-training:
    name: Model Training
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: ml/requirements.txt
    
    - name: Install dependencies
      working-directory: ./ml
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Download training data
      working-directory: ./ml
      run: |
        python scripts/download_data.py
        
    - name: Train model
      working-directory: ./ml
      run: |
        python src/train.py --config config/training_config.yml
        
    - name: Evaluate model
      working-directory: ./ml
      run: |
        python src/evaluate.py --model-path models/burnout_model.pkl
        
    - name: Upload model artifacts
      uses: actions/upload-artifact@v3
      with:
        name: trained-model
        path: ml/models/
        retention-days: 30

  build:
    name: Build ML Service
    runs-on: ubuntu-latest
    needs: [model-training]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: ml/requirements.txt
    
    - name: Install dependencies
      working-directory: ./ml
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./ml
        file: ./ml/Dockerfile
        push: false
        tags: burnout-prediction/ml-service:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  performance:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: ml/requirements.txt
    
    - name: Install dependencies
      working-directory: ./ml
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust
        
    - name: Start ML service
      working-directory: ./ml
      run: |
        python -m uvicorn src.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        
    - name: Run performance tests
      working-directory: ./ml
      run: |
        locust -f tests/performance/locustfile.py --host http://localhost:8000 --users 100 --spawn-rate 10 --run-time 60s --headless
        
    - name: Generate performance report
      working-directory: ./ml
      run: |
        python tests/performance/generate_report.py

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, performance]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add your staging deployment commands here
        # Example: kubectl apply -f k8s/staging/
        # Example: docker-compose -f docker-compose.staging.yml up -d

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, performance]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add your production deployment commands here
        # Example: kubectl apply -f k8s/production/
        # Example: docker-compose -f docker-compose.prod.yml up -d
      
    - name: Run smoke tests
      run: |
        echo "Running smoke tests"
        # Add your smoke test commands here
        # Example: curl -f http://production-url/health
