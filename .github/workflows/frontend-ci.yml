name: Frontend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths: [ 'frontend/**' ]
  pull_request:
    branches: [ main, develop ]
    paths: [ 'frontend/**' ]

env:
  NODE_VERSION: '18.17.0'

jobs:
  test:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Run linting
      working-directory: ./frontend
      run: npm run lint
      
    - name: Run type checking
      working-directory: ./frontend
      run: npm run type-check
      
    - name: Run formatting check
      working-directory: ./frontend
      run: npm run format:check
      
    - name: Run unit tests
      working-directory: ./frontend
      run: npm run test:coverage
      env:
        NODE_ENV: test
        VITE_API_URL: http://localhost:3001/api
        VITE_ML_SERVICE_URL: http://localhost:8000
      
    - name: Run component tests
      working-directory: ./frontend
      run: npm run test:run
      env:
        NODE_ENV: test
        VITE_API_URL: http://localhost:3001/api
        VITE_ML_SERVICE_URL: http://localhost:8000
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Run security audit
      working-directory: ./frontend
      run: npm audit --audit-level=moderate
      
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true
      
    - name: Run CodeQL analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript
        
    - name: Perform CodeQL analysis
      uses: github/codeql-action/analyze@v2

  build:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Build application
      working-directory: ./frontend
      run: npm run build
      env:
        NODE_ENV: production
        VITE_API_URL: ${{ secrets.PRODUCTION_API_URL }}
        VITE_ML_SERVICE_URL: ${{ secrets.PRODUCTION_ML_SERVICE_URL }}
      
    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: burnout-prediction/frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  lighthouse:
    name: Lighthouse Performance Test
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Build application
      working-directory: ./frontend
      run: npm run build
      env:
        NODE_ENV: production
        VITE_API_URL: http://localhost:3001/api
        VITE_ML_SERVICE_URL: http://localhost:8000
      
    - name: Start development server
      working-directory: ./frontend
      run: npm run preview &
      
    - name: Wait for server
      run: sleep 10
      
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './frontend/lighthouse.config.js'
        uploadArtifacts: true
        temporaryPublicStorage: true

  accessibility:
    name: Accessibility Test
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Build application
      working-directory: ./frontend
      run: npm run build
      env:
        NODE_ENV: production
        VITE_API_URL: http://localhost:3001/api
        VITE_ML_SERVICE_URL: http://localhost:8000
      
    - name: Start development server
      working-directory: ./frontend
      run: npm run preview &
      
    - name: Wait for server
      run: sleep 10
      
    - name: Run accessibility tests
      run: |
        npm install -g @axe-core/cli
        axe http://localhost:4173 --exit

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, lighthouse, accessibility]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add your staging deployment commands here
        # Example: aws s3 sync dist/ s3://staging-bucket/
        # Example: kubectl apply -f k8s/staging/

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, lighthouse, accessibility]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add your production deployment commands here
        # Example: aws s3 sync dist/ s3://production-bucket/
        # Example: kubectl apply -f k8s/production/
      
    - name: Run smoke tests
      run: |
        echo "Running smoke tests"
        # Add your smoke test commands here
        # Example: curl -f http://production-url/
